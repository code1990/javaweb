课程目录：

第一周
1. 讲师背景介绍
2. java开发现状与趋势
3. Uber的功能，要解决的问题
4. Uber系统架构
5. Uber项目技术栈
          服务层: Spring, Spring Boot，Spring Cloud
          数据: RabbitMQ, MongoDB
          虚拟化技术: Docker, Vagrant
          通信: Web Socket
6. Uber项目展示
7. Uber项目拓展
          实时获取GPS信息，进行车辆以及交通流量监控。
          根据乘客需求，加入匹配算法进行乘客与附近车辆匹配进行调度。(Uber匹配系统)
          计算交通流量热点，从而动态平衡供应和需求 (Uber大数据平台)
VIEW LESS
第二周
学习目标：
1. 理解Java开发基础知识
2. 知道Spring框架核心思想，知道什么是IoC, Spring容器的生命周期，Bean如何进行管理和初始化，知道如何进行Spring框架的配置
3. 能够运用Vagrant操作虚拟机，搭建开发环境
4. 知道什么是REST API，能够理解什么是好的REST API
5. 能够运用Spring框架编写简单的REST API
6. 能够部署Spring应用程序到Tomcat

具体理论课程安排：

1. Java开发基础知识
Java概述以及现状
Java多线程
Maven简介
Servlet基础
Java服务器工作原理
Java和其他语言对比
2. Spring框架以及原理
Spring框架概述
Spring核心架构
IoC
Dependency Injection
Bean初始化以及管理
Spring容器生命周期
什么是Component Scan
Spring框架与Java EE的对比
3. Spring MVC
Spring MVC简介
Spring MVC核心组件
Spring MVC思想及应用
4. REST API
什么是REST API
HTTP verb
HTTP status
为什么要用REST
什么是好的REST API
5. Vagrant简介
什么是Vagrant
为什么要用Vagrant
使用Vagrant带来的好处
6. 本地开发环境简介
xUbuntu
JDK
Git
Oh My Zsh
IntelliJ IDEA / Eclipse
Maven
7. Maven 简介
什么是Maven
为什么用Maven
POM.xml概述
Maven基本操作
8. Tomcat 简介
什么是Servlet容器
为什么使用Tomcat
Tomcat与其他容器对比

项目课程安排：
1. 运用Vagrant安装本地开发环境
xUbuntu
JDK
Git
Oh My Zsh
IntelliJ IDEA / Eclipse
Maven
2. 运用Spring编写简单的REST API
         - 编写程序框架
引入依赖库
实现REST API 功能
编译，打包
部署到Tomcat容器
检查结果
课后作业
1. 编写自己的Spring Bean，并进行依赖注入
2. 编写新的API, 返回一个JSON对象
VIEW LESS
第三周
学习目标：
1. 知道什么是Spring Boot, Spring Boot有哪些功能，为什么要使用Spring Boot
2. 能够运用Spring Boot快速搭建Java应用 (重点)
3. 知道什么是Spring Data, 为什么要使用Spring Data
4. 能够运用Spring Data完成数据持久化
5. 知道什么是容器化技术，容器化带来的好处。 能够使用Docker命令行操作容器
6. 能够用Docker运行MongoDB
7. 能够编写简单的CRUD REST API

具体理论课程安排:

1. Spring Boot 简介
什么是Spring Boot
为什么要有Spring Boot
Spring Boot和传统Spring框架的对比
2. Spring Boot 重要功能
Convention over Configuration
Embedded Tomcat
Spring Boot Actuator
应用属性配置及管理
3. Docker简介
什么是Docker和容器化技术
Docker带来的好处
Docker应用
4. NoSQL数据库简介
什么是NoSQL数据库
MongoDB简介
MongoDB相对传统数据库的优势
5. Spring Data简介
什么是Spring Data
为什么使用Spring Data
如何使用Spring Data

项目课程安排:

1. 使用Spring Boot改写第一次课程的REST API
更改包依赖
更改框架配置
更改部署方式
2. 使用Docker启动MongoDB
配置Docker
启动MongoDB
3. 使用Spring Data 连接MongoDB
编写Spring Data API连接MongoDB
确认没有异常
4. 编写REST API进行数据持久化
设计项目所需的实体类
通过REST API持久化实体类
通过REST API进行数据库查询

课后作业:

1. 完成项目所需其他实体类的编写
2. 完成所有实体类的REST API以及数据访问类
MongoDB, Uber, 数据库, 数据持久化, Servlet